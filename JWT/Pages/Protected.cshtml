@page
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@model ProtectedModel
@{
    ViewData["Title"] = "Página Protegida";
}

<div class="container mt-5">
    <div class="jumbotron">
        <h1 class="display-4">¡Bienvenido a la Zona Protegida, @User.Identity.Name!</h1>
        <p class="lead">Este contenido solo es visible si tienes un token JWT válido.</p>
        <hr class="my-4">
        <p>Tu token expira en: <span id="expiresIn">Cargando...</span></p>
        <p id="expirationMessage" class="text-warning fw-bold d-none">¡Tu sesión se refrescará automáticamente pronto!</p>
        <p id="criticalMessage" class="text-danger fw-bold d-none">¡Tu sesión está a punto de expirar!</p>

        <div class="mt-3">
            <button id="refreshTokenBtn" class="btn btn-warning">Refrescar Token Ahora</button>
            <button id="logoutBtn" class="btn btn-danger">Cerrar Sesión</button>
            <button id="toggleAutoRefresh" class="btn btn-info">Auto-refresh: <span id="autoRefreshStatus">Activado</span></button>
        </div>

        <!-- Panel de debug -->
        <div class="mt-4">
            <button id="debugBtn" class="btn btn-secondary btn-sm">Mostrar Debug</button>
            <div id="debugInfo" class="mt-2 p-3 bg-light border rounded d-none">
                <h6>Información de Debug:</h6>
                <div id="debugContent"></div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const jwtExpirationMinutes = @(int.Parse(Model.Configuration.GetSection("Jwt")["ExpirationMinutes"]));
        let tokenExpirationTime;
        let countdownInterval;
        let autoRefreshTimeout;

        // Configuración de tiempos (en minutos)
        const WARNING_TIME_MINUTES = 15;
        const CRITICAL_TIME_MINUTES = 5;
        const AUTO_REFRESH_TIME_MINUTES = 10;
        let AUTO_REFRESH_ENABLED = true;

        async function getTokenExpiration() {
            try {
                console.log('Obteniendo información del token...');

                const response = await fetch('/api/token-info', {
                    method: 'GET',
                    credentials: 'include',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    const data = await response.json();
                    console.log('Token info recibida:', data);

                    tokenExpirationTime = new Date(data.expiresAt).getTime();
                    console.log('Token expira en:', new Date(tokenExpirationTime));

                    updateDebugInfo(data);
                    startCountdown();

                    if (AUTO_REFRESH_ENABLED) {
                        scheduleAutoRefresh();
                    }
                } else {
                    const errorText = await response.text();
                    console.error('Error del servidor:', response.status, errorText);
                    document.getElementById('expiresIn').innerText = `Error ${response.status}`;

                    if (response.status === 401) {
                        setTimeout(() => logout(), 2000);
                    }
                }
            } catch (error) {
                console.error('Error de red:', error);
                document.getElementById('expiresIn').innerText = 'Error de conexión.';
            }
        }

        function scheduleAutoRefresh() {
            if (!AUTO_REFRESH_ENABLED) {
                console.log('Auto-refresh desactivado');
                return;
            }

            if (autoRefreshTimeout) {
                clearTimeout(autoRefreshTimeout);
            }

            const now = new Date().getTime();
            const totalTimeLeft = tokenExpirationTime - now;
            const timeUntilAutoRefresh = totalTimeLeft - (AUTO_REFRESH_TIME_MINUTES * 60 * 1000);

            console.log('Tiempo total restante (minutos):', Math.floor(totalTimeLeft / (1000 * 60)));
            console.log('Tiempo hasta auto-refresh (minutos):', Math.floor(timeUntilAutoRefresh / (1000 * 60)));

            if (timeUntilAutoRefresh > 60000) {
                console.log('Programando auto-refresh en', Math.floor(timeUntilAutoRefresh / (1000 * 60)), 'minutos');

                autoRefreshTimeout = setTimeout(async () => {
                    console.log('Ejecutando refresh automático...');
                    await refreshToken(true);
                }, timeUntilAutoRefresh);
            } else {
                console.log('No se programa auto-refresh - muy poco tiempo restante');
            }
        }

        async function refreshToken(isAutomatic = false) {
            try {
                console.log('Iniciando refresh de token...', isAutomatic ? '(automático)' : '(manual)');

                const response = await fetch('/api/refresh-token', {
                    method: 'POST',
                    credentials: 'include',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    const data = await response.json();
                    console.log('Refresh exitoso:', data);

                    if (!isAutomatic) {
                        showNotification('¡Token refrescado exitosamente!', 'success');
                    } else {
                        showNotification('Token refrescado automáticamente', 'info');
                    }

                    await getTokenExpiration();
                } else {
                    const errorText = await response.text();
                    console.error('Error al refrescar:', response.status, errorText);

                    if (response.status === 401) {
                        showNotification('Sesión expirada. Redirigiendo...', 'error');
                        setTimeout(() => logout(), 2000);
                    } else {
                        showNotification(`Error al refrescar token: ${response.status}`, 'error');
                    }
                }
            } catch (error) {
                console.error('Error refrescando token:', error);
                showNotification('Error de red al refrescar el token', 'error');
            }
        }

        function startCountdown() {
            clearInterval(countdownInterval);
            countdownInterval = setInterval(() => {
                const now = new Date().getTime();
                const distance = tokenExpirationTime - now;

                if (distance < 0) {
                    clearInterval(countdownInterval);
                    clearTimeout(autoRefreshTimeout);
                    document.getElementById('expiresIn').innerText = '¡Expirado!';
                    showNotification('Sesión expirada. Redirigiendo...', 'error');
                    setTimeout(() => logout(), 2000);
                    return;
                }

                const hours = Math.floor(distance / (1000 * 60 * 60));
                const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                const seconds = Math.floor((distance % (1000 * 60)) / 1000);

                if (hours > 0) {
                    document.getElementById('expiresIn').innerText = `${hours}h ${minutes}m ${seconds}s`;
                } else {
                    document.getElementById('expiresIn').innerText = `${minutes}m ${seconds}s`;
                }

                const warningElement = document.getElementById('expirationMessage');
                const criticalElement = document.getElementById('criticalMessage');

                if (distance < CRITICAL_TIME_MINUTES * 60 * 1000) {
                    warningElement.classList.add('d-none');
                    criticalElement.classList.remove('d-none');
                } else if (distance < WARNING_TIME_MINUTES * 60 * 1000) {
                    warningElement.classList.remove('d-none');
                    criticalElement.classList.add('d-none');
                } else {
                    warningElement.classList.add('d-none');
                    criticalElement.classList.add('d-none');
                }
            }, 1000);
        }

        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            let alertClass = 'alert-info';
            let icon = 'ℹ';

            switch(type) {
                case 'success':
                    alertClass = 'alert-success';
                    icon = '✓';
                    break;
                case 'error':
                    alertClass = 'alert-danger';
                    icon = '✗';
                    break;
                case 'warning':
                    alertClass = 'alert-warning';
                    icon = '⚠';
                    break;
            }

            notification.className = `alert ${alertClass} position-fixed`;
            notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);';
            notification.innerHTML = `
                <strong>${icon}</strong> ${message}
                <button type="button" class="btn-close float-end" onclick="this.parentElement.remove()"></button>
            `;

            document.body.appendChild(notification);

            setTimeout(() => {
                if (notification.parentElement) {
                    notification.remove();
                }
            }, 5000);
        }

        function toggleAutoRefresh() {
            AUTO_REFRESH_ENABLED = !AUTO_REFRESH_ENABLED;
            const statusElement = document.getElementById('autoRefreshStatus');
            statusElement.textContent = AUTO_REFRESH_ENABLED ? 'Activado' : 'Desactivado';

            if (AUTO_REFRESH_ENABLED) {
                scheduleAutoRefresh();
                showNotification('Auto-refresh activado', 'success');
            } else {
                if (autoRefreshTimeout) {
                    clearTimeout(autoRefreshTimeout);
                }
                showNotification('Auto-refresh desactivado', 'warning');
            }
        }

        function updateDebugInfo(data) {
            const debugContent = document.getElementById('debugContent');
            const nextRefresh = AUTO_REFRESH_ENABLED ?
                `En ${AUTO_REFRESH_TIME_MINUTES} minutos antes de expirar` :
                'Desactivado';

            debugContent.innerHTML = `
                <pre>${JSON.stringify(data, null, 2)}</pre>
                <p><strong>Configuración JWT:</strong> ${jwtExpirationMinutes} minutos</p>
                <p><strong>Auto-refresh:</strong> ${nextRefresh}</p>
                <p><strong>Advertencia en:</strong> ${WARNING_TIME_MINUTES} minutos</p>
                <p><strong>Crítico en:</strong> ${CRITICAL_TIME_MINUTES} minutos</p>
                <p><strong>URL actual:</strong> ${window.location.href}</p>
            `;
        }

        function logout() {
            console.log('Iniciando logout...');

            // Limpiar intervalos y timeouts
            clearInterval(countdownInterval);
            clearTimeout(autoRefreshTimeout);

            // Limpiar cookies localmente
            document.cookie = 'jwtToken=; path=/; expires=Thu, 01 Jan 1970 00:00:00 UTC;';

            // Redirigir sin mostrar alertas adicionales
            window.location.href = '/Login?logout=true';
        }

        // Event listeners
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Página cargada, obteniendo información del token...');
            getTokenExpiration();
        });

        document.getElementById('refreshTokenBtn').addEventListener('click', () => refreshToken(false));
        document.getElementById('logoutBtn').addEventListener('click', logout);
        document.getElementById('toggleAutoRefresh').addEventListener('click', toggleAutoRefresh);

        document.getElementById('debugBtn').addEventListener('click', function() {
            const debugInfo = document.getElementById('debugInfo');
            debugInfo.classList.toggle('d-none');
        });
    </script>
}
