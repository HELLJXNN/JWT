@page
@model LoginModel
@{
    ViewData["Title"] = "Iniciar Sesión";
}

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h4>Iniciar Sesión</h4>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @Model.ErrorMessage
                        </div>
                    }

                    <!-- Mensaje de logout -->
                    <div id="logoutMessage" class="alert alert-info d-none" role="alert">
                        <strong>ℹ</strong> Sesión cerrada. Cookies limpiadas automáticamente.
                    </div>

                    <!-- Mensaje de estado -->
                    <div id="statusMessage" class="alert alert-warning d-none" role="alert">
                        <strong>⚠</strong> <span id="statusText"></span>
                    </div>

                    <form method="post" id="loginForm">
                        <div class="mb-3">
                            <label for="username" class="form-label">Usuario</label>
                            <input type="text" class="form-control" id="username" name="username" value="admin" required>
                        </div>
                        <div class="mb-3">
                            <label for="password" class="form-label">Contraseña</label>
                            <input type="password" class="form-control" id="password" name="password" value="password" required>
                        </div>
                        <button type="submit" class="btn btn-primary" id="loginBtn">
                            <span id="loginBtnText">Entrar</span>
                            <span id="loginSpinner" class="spinner-border spinner-border-sm d-none" role="status"></span>
                        </button>
                        <button type="button" id="resetSession" class="btn btn-danger">Reset Completo</button>
                    </form>

                    <!-- Panel de debug -->
                    <div class="mt-3">
                        <button type="button" id="showDebug" class="btn btn-secondary btn-sm">Mostrar Debug</button>
                        <div id="debugPanel" class="mt-2 p-2 bg-light border rounded d-none">
                            <small>
                                <div>Cookies actuales: <span id="currentCookies">-</span></div>
                                <div>Estado: <span id="debugStatus">-</span></div>
                                <div>Último error: <span id="lastError">-</span></div>
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let isProcessing = false;
        let debugMode = false;

        function updateDebug(status, error = '') {
            if (debugMode) {
                document.getElementById('currentCookies').textContent = document.cookie || 'Ninguna';
                document.getElementById('debugStatus').textContent = status;
                document.getElementById('lastError').textContent = error || 'Ninguno';
            }
        }

        function showStatus(message, type = 'warning') {
            const statusDiv = document.getElementById('statusMessage');
            const statusText = document.getElementById('statusText');

            statusText.textContent = message;
            statusDiv.className = `alert alert-${type}`;
            statusDiv.classList.remove('d-none');

            setTimeout(() => {
                statusDiv.classList.add('d-none');
            }, 5000);
        }

        function setLoginButtonState(loading = false) {
            const btn = document.getElementById('loginBtn');
            const text = document.getElementById('loginBtnText');
            const spinner = document.getElementById('loginSpinner');

            if (loading) {
                btn.disabled = true;
                text.textContent = 'Procesando...';
                spinner.classList.remove('d-none');
            } else {
                btn.disabled = false;
                text.textContent = 'Entrar';
                spinner.classList.add('d-none');
            }
        }

        // Función NUCLEAR para limpiar TODO
        function nuclearCleanup() {
            console.log('🧹 LIMPIEZA NUCLEAR INICIADA');
            updateDebug('Iniciando limpieza nuclear');

            // 1. Limpiar todas las variaciones posibles de cookies
            const domains = [window.location.hostname, '.' + window.location.hostname, 'localhost', '.localhost'];
            const paths = ['/', '/Login', '/Protected'];
            const cookieNames = ['jwtToken', 'jwt', 'token', 'auth'];

            domains.forEach(domain => {
                paths.forEach(path => {
                    cookieNames.forEach(name => {
                        // Múltiples configuraciones para asegurar limpieza
                        const configs = [
                            `${name}=; domain=${domain}; path=${path}; expires=Thu, 01 Jan 1970 00:00:00 UTC;`,
                            `${name}=; domain=${domain}; path=${path}; expires=Thu, 01 Jan 1970 00:00:00 UTC; secure;`,
                            `${name}=; domain=${domain}; path=${path}; expires=Thu, 01 Jan 1970 00:00:00 UTC; samesite=lax;`,
                            `${name}=; domain=${domain}; path=${path}; expires=Thu, 01 Jan 1970 00:00:00 UTC; secure; samesite=lax;`,
                            `${name}=; domain=${domain}; path=${path}; expires=Thu, 01 Jan 1970 00:00:00 UTC; samesite=strict;`,
                            `${name}=; domain=${domain}; path=${path}; expires=Thu, 01 Jan 1970 00:00:00 UTC; samesite=none; secure;`
                        ];

                        configs.forEach(config => {
                            document.cookie = config;
                        });
                    });
                });
            });

            // 2. Limpiar storage
            try {
                localStorage.clear();
                sessionStorage.clear();
            } catch (e) {
                console.log('Error limpiando storage:', e);
            }

            // 3. Limpiar cache si es posible
            if ('caches' in window) {
                caches.keys().then(names => {
                    names.forEach(name => {
                        caches.delete(name);
                    });
                });
            }

            console.log('🧹 LIMPIEZA NUCLEAR COMPLETADA');
            updateDebug('Limpieza nuclear completada');
        }

        // Reset completo del sistema
        function resetCompleteSession() {
            if (isProcessing) return;
            isProcessing = true;

            showStatus('Reseteando sesión completamente...', 'info');
            setLoginButtonState(true);

            // Limpieza nuclear
            nuclearCleanup();

            // Llamar al endpoint de logout del servidor
            fetch('/api/logout', {
                method: 'POST',
                credentials: 'include'
            }).then(() => {
                console.log('Logout del servidor completado');
            }).catch(e => {
                console.log('Error en logout del servidor:', e);
            }).finally(() => {
                // Esperar un poco y recargar la página
                setTimeout(() => {
                    showStatus('Reset completado. Recargando página...', 'success');
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                }, 500);
            });
        }

        // Manejar logout automático
        document.addEventListener('DOMContentLoaded', function() {
            const urlParams = new URLSearchParams(window.location.search);
            const logoutParam = urlParams.get('logout');

            if (logoutParam === 'true') {
                console.log('🔄 Logout detectado, iniciando limpieza automática');

                // Mostrar mensaje
                document.getElementById('logoutMessage').classList.remove('d-none');

                // Limpieza automática
                nuclearCleanup();

                // Limpiar URL
                window.history.replaceState({}, document.title, window.location.pathname);

                updateDebug('Logout automático completado');
            }

            updateDebug('Página cargada');
        });

        // Interceptar envío del formulario
        document.getElementById('loginForm').addEventListener('submit', function(e) {
            if (isProcessing) {
                e.preventDefault();
                return;
            }

            isProcessing = true;
            setLoginButtonState(true);
            showStatus('Preparando login...', 'info');

            // Prevenir envío inicial
            e.preventDefault();

            // Limpieza antes del login
            nuclearCleanup();

            // Esperar un poco para que la limpieza se complete
            setTimeout(() => {
                updateDebug('Enviando formulario');
                showStatus('Enviando credenciales...', 'info');

                // Ahora sí enviar el formulario
                e.target.submit();
            }, 1000);
        });

        // Event listeners
        document.getElementById('resetSession').addEventListener('click', resetCompleteSession);

        document.getElementById('showDebug').addEventListener('click', function() {
            debugMode = !debugMode;
            const panel = document.getElementById('debugPanel');
            panel.classList.toggle('d-none');
            this.textContent = debugMode ? 'Ocultar Debug' : 'Mostrar Debug';

            if (debugMode) {
                updateDebug('Debug activado');
            }
        });

        // Actualizar debug cada 2 segundos si está activo
        setInterval(() => {
            if (debugMode) {
                updateDebug('Monitoreando...');
            }
        }, 2000);
    </script>
}
